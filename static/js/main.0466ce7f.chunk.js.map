{"version":3,"sources":["serviceWorker.js","Store.js","App.jsx","pages/HomePage.jsx","pages/FavPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Store","createContext","initialState","episodes","favourites","reducer","state","action","type","payload","Object","objectSpread","concat","toConsumableArray","App","props","useContext","react_default","a","createElement","react","fallback","className","es","to","length","children","EpisodesList","lazy","__webpack_require__","e","then","bind","HomePage","_useContext","dispatch","fetchDataAction","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","dataJSON","wrap","_context","prev","next","fetch","sent","json","abrupt","_embedded","stop","apply","this","arguments","toggleFavAction","episode","episodeInFavourites","includes","dispatchObj","filter","fav","id","useEffect","FavPage","FavPage_EpisodesList","ReactDOM","render","_useReducer","useReducer","_useReducer2","slicedToArray","value","Provider","src_App","path","pages_HomePage","pages_FavPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0466ce7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useReducer, createContext } from \"react\";\n\nexport const Store = createContext();\n\nconst initialState = {\n\tepisodes: [],\n\tfavourites: []\n};\n\nfunction reducer(state, action) {\n\tconst { type, payload } = action;\n\tswitch (type) {\n\t\tcase \"FETCH_DATA\":\n\t\t\treturn { ...state, episodes: payload };\n\t\tcase \"ADD_FAV\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfavourites: [...state.favourites, payload]\n\t\t\t};\n\t\tcase \"REMOVE_FAV\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfavourites: payload\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport function StoreProivder(props) {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\tconst value = { state, dispatch };\n\treturn <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n","import React, { Fragment, Suspense, useContext } from \"react\";\nimport { Store } from \"./Store\";\nimport { Link } from \"@reach/router\";\n\nconst App = props => {\n\tconst { state } = useContext(Store);\n\treturn (\n\t\t<Fragment>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<header className=\"header\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>Rick and Morty</h1>\n\t\t\t\t\t\t<p>Pick your favourite episodes</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t\t<Link to=\"/faves\">Favourite(s) {state.favourites.length}</Link>\n\t\t\t\t\t</nav>\n\t\t\t\t</header>\n\t\t\t\t{props.children}\n\t\t\t</Suspense>\n\t\t</Fragment>\n\t);\n};\n\nexport default App;\n","import React, { Fragment, Suspense, lazy, useEffect, useContext } from \"react\";\nimport { Store } from \"../Store\";\n\nconst EpisodesList = lazy(() => import(\"../components/EpisodesList\"));\n\nconst HomePage = () => {\n\tconst { state, dispatch } = useContext(Store);\n\n\tconst toggleFavAction = episode => {\n\t\tconst episodeInFavourites = state.favourites.includes(episode);\n\n\t\tlet dispatchObj = {\n\t\t\ttype: \"ADD_FAV\",\n\t\t\tpayload: episode\n\t\t};\n\n\t\tif (episodeInFavourites) {\n\t\t\tconst favouritesWithoutEpisode = state.favourites.filter(\n\t\t\t\tfav => fav.id !== episode.id\n\t\t\t);\n\n\t\t\tdispatchObj = {\n\t\t\t\ttype: \"REMOVE_FAV\",\n\t\t\t\tpayload: favouritesWithoutEpisode\n\t\t\t};\n\t\t}\n\n\t\treturn dispatch(dispatchObj);\n\t};\n\n\tconst fetchDataAction = async () => {\n\t\tconst data = await fetch(\n\t\t\t\"https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes\"\n\t\t);\n\t\tconst dataJSON = await data.json();\n\t\treturn dispatch({\n\t\t\ttype: \"FETCH_DATA\",\n\t\t\tpayload: dataJSON._embedded.episodes\n\t\t});\n\t};\n\n\tconst { favourites, episodes } = state;\n\n\tconst props = {\n\t\tepisodes,\n\t\ttoggleFavAction,\n\t\tfavourites\n\t};\n\n\tuseEffect(() => {\n\t\tstate.episodes.length === 0 && fetchDataAction();\n\t});\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<section className=\"episode-layout\">\n\t\t\t\t\t<EpisodesList {...props} />\n\t\t\t\t</section>\n\t\t\t</Suspense>\n\t\t</Fragment>\n\t);\n};\n\nexport default HomePage;\n","import React, { lazy, useContext, Suspense } from \"react\";\nimport { Store } from \"../Store\";\n\nconst EpisodesList = lazy(() => import(\"../components/EpisodesList\"));\n\nconst FavPage = () => {\n\tconst { state, dispatch } = useContext(Store);\n\n\tconst toggleFavAction = episode => {\n\t\tconst episodeInFavourites = state.favourites.includes(episode);\n\n\t\tlet dispatchObj = {\n\t\t\ttype: \"ADD_FAV\",\n\t\t\tpayload: episode\n\t\t};\n\n\t\tif (episodeInFavourites) {\n\t\t\tconst favouritesWithoutEpisode = state.favourites.filter(\n\t\t\t\tfav => fav.id !== episode.id\n\t\t\t);\n\n\t\t\tdispatchObj = {\n\t\t\t\ttype: \"REMOVE_FAV\",\n\t\t\t\tpayload: favouritesWithoutEpisode\n\t\t\t};\n\t\t}\n\n\t\treturn dispatch(dispatchObj);\n\t};\n\n\tconst { favourites } = state;\n\n\tconst props = {\n\t\tepisodes: favourites,\n\t\ttoggleFavAction,\n\t\tfavourites\n\t};\n\treturn (\n\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t<div className=\"episode-layout\">\n\t\t\t\t<EpisodesList {...props} />\n\t\t\t</div>\n\t\t</Suspense>\n\t);\n};\n\nexport default FavPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"@reach/router\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StoreProivder } from \"./Store\";\n\nimport App from \"./App\";\nimport HomePage from \"./pages/HomePage\";\nimport FavPage from \"./pages/FavPage\";\n\nReactDOM.render(\n\t<StoreProivder>\n\t\t<Router>\n\t\t\t<App path=\"/\">\n\t\t\t\t<HomePage path=\"/\" />\n\t\t\t\t<FavPage path=\"/faves\" />\n\t\t\t</App>\n\t\t</Router>\n\t</StoreProivder>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}